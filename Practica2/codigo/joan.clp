;;; Modulo para construir la solución(defmodule sintesis	(import MAIN ?ALL)	(import input ?ALL)	(export ?ALL))(deffunction sintesis::obtener_objetivos (?duracion_rutina $?enfermedades)	(bind ?nFuerza 0)	(bind ?nFlexibilidad 0)	(bind ?nResistencia 0)	(progn$ (?enfermedad $?enfermedades)		(bind ?tipo (send ?enfermedad get-Afectacion))		(switch ?tipo			(case Cardiovascular then (bind ?nFuerza (+ ?nFuerza 1)))			(case Osea then (bind ?nFlexibilidad (+ ?nFlexibilidad 1)))			(case Muscular then (bind ?nResistencia (+ ?nResistencia 1)))			(case Respiratoria then (bind ?nResistencia (+ ?nResistencia 1)))			(case Hormonal then (bind ?nFuerza (+ ?nFuerza 1)))			(case Nerviosa then (bind ?nFlexibilidad (+ ?nFlexibilidad 1)))		)	)			;; Creamos una lista donde aparecerán los objetivos ordenados según su frecuencia	;; Por el momento solo lo haremos sin ordenar y con los objetivos con valor > 0	(bind $?objetivos (create$))	if (> ?nFuerza 0) then (bind $?objetivos (insert$ $?objetivos (+ (length$ $?objetivos) 1) Fuerza))	if (> ?nFlexibilidad 0) then (bind $?objetivos (insert$ $?objetivos (+ (length$ $?objetivos) 1) Flexibilidad))	if (> ?nResistencia 0) then (bind $?objetivos (insert$ $?objetivos (+ (length$ $?objetivos) 1) Resistencia))		;; Hacemos que para cada día haya un objetivo	;; Si en un momento llegamos a tener más de 4 objetivos hay que modificar esto para juntar ejercicios en el mismo día	(bind ?i 1)	(while (< (length$ $?objetivos) ?duracion_rutina) do		(bind $?objetivos (insert$ $?objetivos (+ (length$ $?objetivos) 1) (nth$ ?i $?objetivos)))		(bind ?i (+ ?i 1))	)		(return $?objetivos))(deffunction sintesis::es_repetido (?nombre $?lista)	(bind ?result FALSE)	(bind ?i 1)		(while (and (<= ?i (length$ $?lista)) (eq ?result FALSE)) do		(bind ?nombre2 (nth$ ?i $?lista))		(if (eq ?nombre (send ?nombre2 get-nombre))			then (bind ?result TRUE)		)		(bind ?i (+ ?i 1))	)		(return ?result))(deffunction sintesis::crear_sesion (?duracion_sesion ?objetivo)	(bind $?sesion (create$))	(bind ?tiempo_sesion 0)	(bind ?continue TRUE)	(printout t "Intentamos crear la sesión con duración " ?duracion_sesion " y objetivo " ?objetivo crlf)		(while (and (< ?tiempo_sesion ?duracion_sesion) ?continue) do		(bind ?continue (any-instancep ((?ej Ejercicio)) (and (eq ?ej:Tipo_Objetivo ?objetivo) (<= (+ ?tiempo_sesion ?ej:Tiempo_Ejercicio) ?duracion_sesion) (not (es_repetido ?ej:nombre $?sesion))))) ;; Hacerlo eficiente		(if (eq ?continue TRUE) then			(bind $?aux (find-instance ((?ej Ejercicio)) (and (eq ?ej:Tipo_Objetivo ?objetivo) (<= (+ ?tiempo_sesion ?ej:Tiempo_Ejercicio) ?duracion_sesion) (not (es_repetido ?ej:nombre $?sesion)))))			(bind ?aux2 (nth$ 1 $?aux))			(bind $?sesion (insert$ $?sesion (+ (length$ $?sesion) 1) ?aux2))			(bind ?tiempo_sesion (+ ?tiempo_sesion (send ?aux2 get-Tiempo_Ejercicio)))		;else		;	(bind ?continue (any-instancep ((?act Actividad)) (and (eq ?act:Tipo_Objetivo ?objetivo) (<= (+ ?tiempo_sesion ?act:Tiempo_Actividad) ?duracion_sesion) (not (es_repetido ?act:nombre $?sesion))))) ;; Hacerlo eficiente		;	if (eq ?continue TRUE) then		;	(bind ?aux (find-instance ((?act Actividad)) (<= (+ ?tiempo_sesion ?act:Tiempo_Actividad) ?duracion_sesion) (not (es_repetido ?act:nombre $?sesion))))		;	(bind $?sesion (insert$ $?sesion (+ (length$ $?sesion) 1) ?aux))		;	(bind ?tiempo_sesion (+ ?tiempo_sesion (send ?aux get-Tiempo_Actividad)))		)	)		(progn$ (?acc $?sesion)		(printout t "He creado la sesión con el ejercicio" ?acc crlf)	)		(make-instance (gensym) of Sesion (Es_un_conjunto_de $?sesion) (Tipo_Objetivo ?objetivo)))(deffunction sintesis::crear_rutina (?paciente)	(printout t "Empezamos la creacion de la rutina" crlf)	;; Obtenemos los parámetros de nuestro paciente	(bind ?duracion_rutina (send ?paciente get-Duracion_dias))	(bind ?duracion_sesion (send ?paciente get-duracion_sesion))	(bind $?padece (send ?paciente get-Padece))		;; Obtenemos una lista con solo las enfermedades del paciente	(bind $?enfermedades (create$))	(progn$ (?aux $?padece)        ;(if (eq (class ?aux) Enfermedad)) then (bind $?enfermedades (insert$ $?enfermedades (+ (length$ $?enfermedades) 1) ?aux))        (bind $?enfermedades (insert$ $?enfermedades (+ (length$ $?enfermedades) 1) ?aux))    )		;; Creamos una lista con los objetivos	(bind $?objetivos (obtener_objetivos ?duracion_rutina $?enfermedades))		;; Creamos la rutina	(loop-for-count (?dia 1 ?duracion_rutina) do		(crear_sesion ?duracion_sesion (nth$ ?dia $?objetivos))	))(defrule sintesis::start	(declare (salience 10))	?paciente <- (object (is-a Persona))	=>	(crear_rutina ?paciente))(defrule descarte::cambio_sintesis "Pasamos de descarte a síntesis cuando ya no hay nada más que descartar"	(declare (salience -20)) ;; hay que poner en común los salience luego	=>	(printout t "Construyendo rutinas..." crlf)	(printout t crlf)	(focus sintesis))(defrule sintesis::cambio_output "Pasamos de síntesis a output"	(declare (salience -20)) ;; hay que poner en común los salience luego	=>	(printout t "Escribiendo rutinas..." crlf)	(focus output))